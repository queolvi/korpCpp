//Написать программу, вычисляющую расстояние S от точки с координатами (p, q) до прямой, описываемой уравнением Ax + By + c = 0, по формуле
//S = |Ap + Bq + C| / sqrt(A^2 + B^2)


#include<iostream>
#include<cmath>

// создаём структуру Point для хранения координат точки
struct Point {
 
	double p, q;
};

double count_dist(double A, double B, double C, const Point& P); // обещаем компилятору, что будет функция, которая вернёт double, с аргументами в виде 3х double'овых переменных и передаём в функцию созданную нами структуру 


int main() {
Point P; // Объявляем переменную P из структуры Point, которая сможет хранить в себе 2 координаты 

double A = 0, B = 0, C = 0; // объявляем 3 double'овых переменных и инициализируем их начальное значение нулями
std::cout << "Enter three values: \n";
std::cin >> A >> B >> C; // ждём от пользователя ввод 3х переменных типа double
std::cout << "Enter coordinates of point: \n"; 			 
std::cin >> P.p >> P.q; // ждём от пользователя координаты точки P

std::cout << "from a point with coordinates (p, q) to a straight line described by the equation : " << count_dist(A, B, C, P); // передаём в функцию count_dist() аргументы, введённые пользователем и получаем результат


return 0;
}


  
double count_dist (double A, double B, double C, const Point& P) { // описываем в теле функции что она должна вернуть

       double	S = std::fabs(A * P.p + B * P.q + C) / std::sqrt(A*A + B*B); // используем библиотеку <cmath> для расчётов
 //  std::fabs() используется для приведения слагаемых в скобках к их модулям
 //  std::sqrt() используется для приведения чисел << под корень >> 
 //  в конечном итоге, получаем математическую формулу, которая возвращает расстояние от точки с координатами до прямой
	return S;  // возвращаем переменную S с типом данных double, для того, что бы точность вычислений была представлена в дробной форме
}
